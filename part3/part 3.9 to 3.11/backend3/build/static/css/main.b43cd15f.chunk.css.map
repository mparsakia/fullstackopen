{"version":3,"sources":["index.css"],"names":[],"mappings":"AAAA,KACE,mJAEY,CACZ,kCAAmC,CACnC,iCAAkC,CAClC,QACF,CAEA,KACE,+DACF,CAEA,GACE,yBACF,CAEA,WACE,WAGF,CAEA,gBAJE,UAAY,CACZ,cAMF,CAEA,OACE,SAQF,CAEA,gBATE,kBAAqB,CACrB,cAAe,CACf,kBAAmB,CACnB,iBAAkB,CAClB,YAAa,CACb,kBAAmB,CACnB,UAYF,CATA,SACE,WAQF","file":"main.b43cd15f.chunk.css","sourcesContent":["body {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;   \n  margin: 0;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\";\n}\n\nh1{\n  text-decoration: underline;\n}\n\n.phonebook {  \n  margin: 20px;\n  color: black;\n  font-size: 14px;\n}\n\n.add {\n  font-size: 14px;\n  color :black;\n}\n\n.error {\n  color: red;\n  background: lightgrey;\n  font-size: 20px;\n  border-style: solid;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 10px;\n  width: 40vw;\n}\n\n.success {\n  color: green;\n  background: lightgrey;\n  font-size: 20px;\n  border-style: solid;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 10px;\n  width: 40vw;\n}\n\n\n/*\nIn regular HTML, classes are defined as the value of the class attribute:\n<li class=\"note\">some text...</li>\n\nIn React we have to use the className attribute instead of the class attribute. \nWith this in mind, let's make the following changes to our Note component:\n\n  const label = note.important \n    ? 'make not important' \n    : 'make important';\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nClass selectors are defined with the .classname syntax:\n\n.note {\n  color: grey;\n  padding-top: 5px;\n  font-size: 15px;\n}\n\nReact also makes it possible to write styles directly in the code as so-called inline styles.\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div> \n  )\n}\n\nInline styles come with certain limitations. For instance, \nso-called pseudo-classes can't be used straightforwardly.\n\nNote: traditionally it was best practice to separate JS, HTML, CSS into their own files.\nSince react is a tool for building UI, it actually makes more sense to put all of the \nJS, HTML, CSS within the React component rather than dealing with separate CSS file.\n\n\n\n\n\n*/"]}